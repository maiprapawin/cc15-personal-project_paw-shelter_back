---- FEATURES ----

1. REGISTER
- Method: POST
- Path: /auth/register
- BODY: firstName, lastName, email, password, confirmPassword
- RESPONSE:
    201 { accessToken: String} //created successfully
    400 { message: String }
    500 { message: String }

2. LOGIN
- Method: POST
- Path: /auth/login 
- BODY: email, password
- RESPONSE:
    200 { accessToken: String }
    400 { message: String }
    500 { message: String }

///////////////////////////////

---- Verify Access Token ----

// Get Authenticated User
(frontend send req ให้ server ตรวจสอบให้ว่า token นี้ใช้ได้ไหม)
- Method: Get (get ข้อมูล user ที่ login อยู่)
- Path: /auth/me
- HEADER: AUTHORIZATION Bearer ACCESS_TOKEN
- BODY: -
- RESPONSE:
    200 { user {id: Number, firstName: String, lastName: String, email: String} } ไม่มี password เพื่อความปลอดภัย
    401 { message: String } ในกรณีที่ verify ไม่ผ่าน เช่น token หมดอายุ, unauthorized
    500 { message: String }

///////////////////////////////

---- CRUD ----

1. CREATE
- Method: POST
- Path: /dog/create
- HEADER: AUTHORIZATION Bearer ACCESS_TOKEN
- BODY: dogImage, dogName, gender, breed?, description?
- RESPONSE:
    201 { message: String }
    400 { message: String } 
    401 { message: String } 
    500 { message: String } 

2. READ
- Method: GET 
- Path: /dog/read 
- HEADER: AUTHORIZATION Bearer ACCESS_TOKEN
- BODY: -
- RESPONSE:
    201 { message: String }
    400 { message: String } 
    401 { message: String } 
    500 { message: String } 

3. UPDATE
- Method: PATCH
- Path: /dog/update
- HEADER: AUTHORIZATION Bearer ACCESS_TOKEN
- BODY: dogImage, dogName, gender, breed?, description?
- RESPONSE:
    201 { message: String }
    400 { message: String } 
    401 { message: String } 
    500 { message: String } 